# An unique identifier for the head node and workers of this cluster.
cluster_name: default

# The minimum number of workers nodes to launch in addition to the head
# node. This number should be >= 0.
min_workers: 0

# The maximum number of workers nodes to launch in addition to the head
# node. This takes precedence over min_workers.
max_workers: 300

# The initial number of worker nodes to launch in addition to the head
# node. When the cluster is first brought up (or when it is refreshed with a
# subsequent `ray up`) this number of nodes will be started.
initial_workers: 200

# Whether or not to autoscale aggressively. If this is enabled, if at any point
#   we would start more workers, we start at least enough to bring us to
#   initial_workers.
# TODO: the code for "aggressive" doesn't really change very much; do we just want a whole lot of initial workers?
autoscaling_mode: aggressive

# The autoscaler will scale up the cluster to this target fraction of resource
# usage. For example, if a cluster of 10 nodes is 100% busy and
# target_utilization is 0.8, it would resize the cluster to 13. This fraction
# can be decreased to increase the aggressiveness of upscaling.
# This max value allowed is 1.0, which is the most conservative setting.
target_utilization_fraction: 0.8

# If a node is idle for this many minutes, it will be removed.
idle_timeout_minutes: 5

# Cloud-provider specific configuration.
# TODO: Is this the region we actually want? What's the cheapest?
provider:
    type: aws
    region: us-east-2
    # Availability zone(s), comma-separated, that nodes may be launched in.
    # Nodes are currently spread between zones by a round-robin approach,
    # however this implementation detail should not be relied upon.
    availability_zone: us-east-2a,us-east-2b,us-east-2c
    # Whether to allow node reuse. If set to False, nodes will be terminated
    # instead of stopped.
    cache_stopped_nodes: True # If not present, the default is True.

# How Ray will authenticate with newly launched nodes.
auth:
    ssh_user: ubuntu
# By default Ray creates a new private keypair, but you can also use your own.
# If you do so, make sure to also set "KeyName" in the head and worker node
# configurations below.
#    ssh_private_key: /path/to/your/key.pem

# Provider-specific config for the head node, e.g. instance type. By default
# Ray will auto-configure unspecified fields such as SubnetId and KeyName.
# For more documentation on available fields, see:
# http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.ServiceResource.create_instances
head_node:
#    ImageId: ami-07fb7bd53bacdfc16 # Ubuntu 20.04
    ImageId: ami-019990a09b12eadcc # customized version of above, with pre-installed libraries

    InstanceType: c5.large # two vCPUs, 4GB RAM

    # You can provision additional disk space with a conf as follows
    BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
              VolumeSize: 100

    # Additional options in the boto docs.

# Provider-specific config for worker nodes, e.g. instance type. By default
# Ray will auto-configure unspecified fields such as SubnetId and KeyName.
# For more documentation on available fields, see:
# http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.ServiceResource.create_instances
worker_nodes:
#    ImageId: ami-07fb7bd53bacdfc16 # Ubuntu 20.04
    ImageId: ami-019990a09b12eadcc # customized version of above, with pre-installed libraries
    InstanceType: c5.large # two vCPUs, 4GB RAM

    # You can provision additional disk space with a conf as follows
    BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
              VolumeSize: 100

    # Run workers on spot by default. Comment this out to use on-demand.
    InstanceMarketOptions:
        MarketType: spot
        # Additional options can be found in the boto docs, e.g.
        #   SpotOptions:
        #       MaxPrice: MAX_HOURLY_PRICE

    # Additional options in the boto docs.

# Files or directories to copy to the head and worker nodes. The format is a
# dictionary from REMOTE_PATH: LOCAL_PATH, e.g.
file_mounts: {
#    "/path1/on/remote/machine": "/path1/on/local/machine",
#    "/path2/on/remote/machine": "/path2/on/local/machine",
}

# Files or directories to copy from the head node to the worker nodes. The format is a
# list of paths. The same path on the head node will be copied to the worker node.
# This behavior is a subset of the file_mounts behavior. In the vast majority of cases
# you should just use file_mounts. Only use this if you know what you're doing!
cluster_synced_files: []

# Whether changes to directories in file_mounts or cluster_synced_files in the head node
# should sync to the worker node continuously
file_mounts_sync_continuously: False

# List of commands that will be run before `setup_commands`. If docker is
# enabled, these commands will run outside the container and before docker
# is setup.
initialization_commands: []

# List of shell commands to run to set up nodes.
setup_commands:
#    - echo 'export PATH="$HOME/anaconda3/envs/tensorflow_p36/bin:$PATH"' >> ~/.bashrc
#    - sudo pkill -9 apt-get || true
#    - sudo pkill -9 dpkg || true
#    - sudo dpkg --configure -a
#    - sudo add-apt-repository ppa:deadsnakes/ppa -y
#    - sudo apt update
#    - sudo apt install --assume-yes make python3-pip python3.8 libgmp-dev libmpfr-dev libmpc-dev python3.8-dev
#    - sudo rm -f /bin/python
#    - sudo ln -s /usr/bin/python3.8 /bin/python
#    - sudo -H python -m pip install --upgrade pip
#    - sudo -H pip install virtualenv==20.0.23 pipenv
#    - sudo -H pip install ray
#    - sudo -H pip install -e 'git+https://github.com/microsoft/electionguard-python.git@feature/generic_chaum_petersen#egg=electionguard'
    - sudo -H pip install -e 'git+https://github.com/votingworks/arlo-e2e#egg=arlo_e2e'
    # we need *lots* of open files to make this work, for some reason (or, we need many more VMs with fewer cores)
#    - sudo sysctl -w fs.file-max=5000000
    # recommendations per http://www.brendangregg.com/blog/2017-12-31/reinvent-netflix-ec2-tuning.html
#    - sudo sysctl -w net.core.somaxconn=1000
#    - sudo sysctl -w net.core.netdev_max_backlog=5000
#    - sudo sysctl -w net.core.rmem_max=16777216
#    - sudo sysctl -w net.core.wmem_max=16777216
#    - sudo sysctl -w 'net.ipv4.tcp_wmem=4096 12582912 16777216'
#    - sudo sysctl -w 'net.ipv4.tcp_rmem=4096 12582912 16777216'
#    - sudo sysctl -w net.ipv4.tcp_max_syn_backlog=8096
#    - sudo sysctl -w net.ipv4.tcp_slow_start_after_idle=0
#    - sudo sysctl -w net.ipv4.tcp_tw_reuse=1
#    - sudo sysctl -w 'net.ipv4.ip_local_port_range=10240 65535'
#    - sudo sysctl -w net.ipv4.tcp_abort_on_overflow=1

# Custom commands that will be run on the head node after common setup.
head_setup_commands: []
#    - sudo -H pip install boto3==1.4.8  # 1.4.8 adds InstanceMarketOptions

# Custom commands that will be run on worker nodes after common setup.
worker_setup_commands: []
# TODO: do we need to explicitly install our own code here?

# Command to start ray on the head node. You don't need to change this.
head_start_ray_commands:
    - ray stop
    - ulimit -n 65536; ray start --head --port=6379 --object-manager-port=8076 --autoscaling-config=~/ray_bootstrap_config.yaml

# Command to start ray on worker nodes. You don't need to change this.
worker_start_ray_commands:
    - ray stop
    - ulimit -n 65536; ray start --address=$RAY_HEAD_IP:6379 --object-manager-port=8076

# TODO: create S3 bucket for the results
# TODO: mount the S3 buckets with s3fs
# TODO: make the S3 writable for us, read-only for everybody else
# TODO: make the Ray web console visible to the outside world (on by default?)
# TODO: firewall-ish rules around the whole cluster?
